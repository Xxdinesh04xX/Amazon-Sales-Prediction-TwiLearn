# -*- coding: utf-8 -*-
"""AmazonSales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/jagritirai223/Amazon-Sales-Prediction-TwiLearn/blob/main/AmazonSales.ipynb

# Importing and Performing EDA on the dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

amazon_data = pd.read_csv(r'/content/drive/MyDrive/TwiLearn Datasets/Amazon Sales data.csv')

amazon_data.head(5)

amazon_data.columns

amazon_data.info()

amazon_data.describe()

amazon_data.isnull().sum()

#Changing the order date from string object to python datetime object
amazon_data['Order Date'] = pd.to_datetime(amazon_data['Order Date'])
amazon_data.head(5)

"""# Analyzing the Dataset

The following charts illustrate the revenue generated by the company based on months and year.

## Showcasing month wise sales for each year from 2010 to mid-2017
"""

monthly_sales = amazon_data.groupby(amazon_data['Order Date'].dt.to_period("M"))['Total Revenue'].sum()
plt.figure(figsize=(12, 6))
monthly_sales.plot(kind='line')
plt.title('Monthly Sales Trend')
plt.xlabel('Month')
plt.ylabel('Total Revenue')
plt.grid()
plt.show()

"""## Showcasing Yearly Revenue generated from 2010-2017"""

yearly_sales = amazon_data.groupby(amazon_data['Order Date'].dt.year)['Total Revenue'].sum()
plt.figure(figsize=(12, 6))
yearly_sales.plot(kind='line', marker='o')
plt.title('Yearly Sales Trend')
plt.xlabel('Year')
plt.ylabel('Total Revenue')
plt.grid()
plt.show()

yearly_monthly_sales = amazon_data.groupby([amazon_data['Order Date'].dt.year, amazon_data['Order Date'].dt.month])['Total Revenue'].sum().unstack()
plt.figure(figsize=(12, 8))
sns.heatmap(yearly_monthly_sales, cmap='YlGnBu', annot=True, fmt='g', cbar=True)
plt.title('Yearly-Monthly Sales Trend')
plt.xlabel('Month')
plt.ylabel('Year')
plt.show()

"""From the graph, we can notice that the highest revenue was generated in the month of May 2013, but the other months in 2013 have been relatively weak in terms of revenue generation. Coming to weak revenue generation, from the yearly sales graph, we can see that, there has been a significant fall in revenue in the years 2015 and 2016 in terms of revenue. Talking of yearly sales, 2012 all-over has been the best year for the company in terms of revenue generation.

## Showcasing Product sales based on tags
"""

order_priority_count = amazon_data['Order Priority'].value_counts()
plt.figure(figsize=(8, 6))
order_priority_count.plot(kind='bar')
plt.title('Order Priority Count')
plt.xlabel('Order Priority')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid()
plt.show()

"""The company, presumably(based on the dataset), has created tags for its products based on priority. Here, we are analyzing the product sales based on the above-said tags. We can see that, products tagged with priority have more in demand for the company.

## Calculating Yearly and Monthly Growth Rates
"""

monthly_sales = amazon_data.groupby(amazon_data['Order Date'].dt.to_period("M"))['Total Revenue'].sum()
yearly_sales = amazon_data.groupby(amazon_data['Order Date'].dt.year)['Total Revenue'].sum()

monthly_growth_rate = monthly_sales.pct_change() * 100
yearly_growth_rate = yearly_sales.pct_change() * 100

monthly_growth_rate.plot(kind='line', marker='o')
plt.title('Monthly Sales Growth Rate')
plt.xlabel('Month')
plt.ylabel('Growth Rate (%)')
plt.show()

yearly_growth_rate.plot(kind='line', marker='o')
plt.title('Yearly Sales Growth Rate')
plt.xlabel('Year')
plt.ylabel('Growth Rate (%)')
plt.show()

"""The above two graphs check and analyze the percentage growth rates from last month and year. We have seen earlier that 2012 has been the most booming year in the company, and the same is indicated in this graph as well. Sales growth has majorly increased from 2011 to 2012. We can also see a gradual increase in the sales growth rate between 2015 and 2017. Coming to monthly comparisons, there have been gradual ups and downs in the sales rate throughout all the years, but the later half of 2016 has seen a huge rise in sales rate.

## Average Order Value Analysis
"""

aov = amazon_data.groupby(amazon_data['Order Date'].dt.year)['Total Revenue'].mean()
print(aov)

plt.figure(figsize=(8, 6))
aov.plot(kind='line', marker='o')
plt.title('Average Order Value (AOV) Trend')
plt.xlabel('Year')
plt.ylabel('AOV')
plt.grid()
plt.show()

"""## Correlation Analysis between different metrics of the dataset"""

from scipy.stats import kruskal

regions = amazon_data['Region'].unique()
region_data = [amazon_data[amazon_data['Region'] == region]['Total Profit'] for region in regions]

statistic, p_value = kruskal(*region_data)

if p_value < 0.05:
    print(f"Kruskal-Wallis test: There is a significant relationship between 'Region' and 'Total Profit' (p-value={p_value})")
else:
    print(f"Kruskal-Wallis test: There is no significant relationship between 'Region' and 'Total Profit' (p-value={p_value})")

import matplotlib.pyplot as plt
import seaborn as sns


plt.figure(figsize=(12, 8))
sns.boxplot(x='Region', y='Total Profit', data=amazon_data, order=regions)
plt.title('Total Profit by Region')
plt.xlabel('Region')
plt.ylabel('Total Profit')
plt.xticks(rotation=45)
plt.grid()
plt.show()

from scipy.stats import kruskal

regions = amazon_data['Item Type'].unique()
region_data = [amazon_data[amazon_data['Item Type'] == region]['Total Profit'] for region in regions]

statistic, p_value = kruskal(*region_data)

if p_value < 0.05:
    print(f"Kruskal-Wallis test: There is a significant relationship between 'Item Type' and 'Total Profit' (p-value={p_value})")
else:
    print(f"Kruskal-Wallis test: There is no significant relationship between 'Item Type' and 'Total Profit' (p-value={p_value})")

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 8))
sns.boxplot(x='Item Type', y='Total Profit', data=amazon_data, order=regions)
plt.title('Total Profit by Item Type')
plt.xlabel('Item Type')
plt.ylabel('Total Profit')
plt.xticks(rotation=45)
plt.grid()
plt.show()

from scipy.stats import kruskal

regions = amazon_data['Sales Channel'].unique()
region_data = [amazon_data[amazon_data['Sales Channel'] == region]['Total Profit'] for region in regions]

statistic, p_value = kruskal(*region_data)

if p_value < 0.05:
    print(f"Kruskal-Wallis test: There is a significant relationship between 'Sales Channel' and 'Total Profit' (p-value={p_value})")
else:
    print(f"Kruskal-Wallis test: There is no significant relationship between 'Sales Channel' and 'Total Profit' (p-value={p_value})")

"""In this section, we are trying to analyze some factors that might be related to sales generated by the company. We are performing this testing using Kruskal-Wallis correlation analysis. There is no significant relationship between the region and sales channel concerning the company's revenue. However, product type has been a significant contributing factor in profit. We can see that cosmetics and household have been major contributing factors towards profits and sales; beverages, meat, and fruits have been the lowest grocers on the website.

## Checking if Total Profit can be predicted from the Total Revenue
"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()

X = amazon_data.groupby(amazon_data['Order Date'].dt.to_period('M'))[['Total Revenue']].mean()
y = amazon_data.groupby(amazon_data['Order Date'].dt.to_period('M'))['Total Profit'].mean()

model.fit(X, y)
slope = model.coef_[0]
intercept = model.intercept_
print(f'Linear Regression Equation: Total Profit = {slope:.4f} * Total Revenue + {intercept:.4f}')

plt.figure(figsize=(8, 6))
plt.scatter(amazon_data.groupby(amazon_data['Order Date'].dt.to_period('M'))[['Total Revenue']].mean(), amazon_data.groupby(amazon_data['Order Date'].dt.to_period('M'))[['Total Profit']].mean(), alpha=0.5)
plt.plot(X, model.predict(X), color='red', linewidth=2)
plt.title('Total Profit vs. Total Revenue')
plt.xlabel('Total Revenue')
plt.ylabel('Total Profit')
plt.grid()
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='Total Revenue', data=amazon_data)
plt.title('Box Plot of Total Revenue')
plt.grid()
plt.show()

from sklearn.linear_model import LinearRegression, TheilSenRegressor
from sklearn.preprocessing import StandardScaler

X_transformed = X.copy()
print(X_transformed)
X_transformed['Total Revenue'] = X_transformed['Total Revenue'].apply(lambda x: np.log(x) if x > 0 else 0)
X_transformed = StandardScaler().fit_transform(X_transformed)

model = TheilSenRegressor()
model.fit(X_transformed, y)

plt.figure(figsize=(8, 6))

plt.scatter(X_transformed, y, alpha=0.5, label='Data')

plt.plot(X_transformed, model.predict(X_transformed), color='red', linewidth=2, label='Regression Line')

plt.title('Total Profit vs. Transformed Total Revenue')
plt.xlabel('Transformed Total Revenue')
plt.ylabel('Total Profit')
plt.legend()
plt.grid()
plt.show()

"""Here we are trying to derive a relation between the revenue generated and the total profit earned by the company by applying simple linear regression. In order to deal with outliers in the date we further apply log transformation to the revenue column and apply theilsen regressor on the dataset.

## Performing Hypotheses Analysis

### Testing the impact of sales channel on the total revenue
"""

channels = amazon_data['Sales Channel'].unique()

import scipy.stats as stats

offline_channel = amazon_data[amazon_data['Sales Channel'] == 'Offline']['Total Revenue']
online_channel = amazon_data[amazon_data['Sales Channel'] == 'Online']['Total Revenue']

t_stat, p_value = stats.ttest_ind(offline_channel, online_channel)

alpha = 0.05

if p_value < alpha:
    print(f"Reject the null hypothesis. There is a statistically significant difference in sales.")
else:
    print(f"Fail to reject the null hypothesis. There is no statistically significant difference in sales.")

plt.figure(figsize=(8, 6))
sns.boxplot(x='Sales Channel', y='Total Revenue', data=amazon_data)
plt.title('Sales Distribution by Sales Channel')
plt.xlabel('Sales Channel')
plt.ylabel('Total Revenue')
plt.show()

"""## Comparing Year-wise Total Revenue and Total Profit"""

amazon_data['Year'] = amazon_data['Order Date'].dt.year

yearly_revenue = amazon_data.groupby('Year')['Total Revenue'].sum()
yearly_profit = amazon_data.groupby('Year')['Total Profit'].sum()

plt.figure(figsize=(10, 6))
plt.bar(yearly_revenue.index, yearly_revenue, label='Total Revenue', width=0.4, align='center')
plt.bar(yearly_profit.index, yearly_profit, label='Total Profit', width=0.4, align='edge')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Year-wise Total Revenue and Total Profit')
plt.xticks(yearly_revenue.index)
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

amazon_data['Year'] = amazon_data['Order Date'].dt.year

yearly_revenue = amazon_data.groupby('Year')['Total Revenue'].sum()
yearly_profit = amazon_data.groupby('Year')['Total Profit'].sum()

profit_margin = (yearly_profit / yearly_revenue) * 100

revenue_growth_rate = yearly_revenue.pct_change() * 100
profit_growth_rate = yearly_profit.pct_change() * 100

fig, axes = plt.subplots(2, 2, figsize=(12, 10))

axes[0, 0].bar(yearly_revenue.index, yearly_revenue, color='blue')
axes[0, 0].set_title('Total Revenue')
axes[0, 0].set_xlabel('Year')
axes[0, 0].set_ylabel('Total Revenue')

axes[0, 1].bar(yearly_profit.index, yearly_profit, color='green')
axes[0, 1].set_title('Total Profit')
axes[0, 1].set_xlabel('Year')
axes[0, 1].set_ylabel('Total Profit')

axes[1, 0].plot(profit_margin.index, profit_margin, marker='o', color='red')
axes[1, 0].set_title('Profit Margin')
axes[1, 0].set_xlabel('Year')
axes[1, 0].set_ylabel('Profit Margin')

axes[1, 1].plot(revenue_growth_rate.index, revenue_growth_rate, marker='o', label='Revenue Growth', color='blue')
axes[1, 1].plot(profit_growth_rate.index, profit_growth_rate, marker='o', label='Profit Growth', color='green')
axes[1, 1].set_title('Growth Rates')
axes[1, 1].set_xlabel('Year')
axes[1, 1].set_ylabel('Growth Rate (%)')
axes[1, 1].legend()

plt.tight_layout()
plt.show()

"""This is yet another set of visualizations to denote the sales of the company across the years. The third graph calculates and illustrates the profit margin for the comany. While the amount of revenue has been high in total in 2012, we see however that the same year did not contribute much in terms of profit. Surprisingly enough, 2016, the year least in terms of revenue has generated the most amount of profit comparatively."""

item_type_data = amazon_data.groupby('Item Type')[['Unit Cost', 'Unit Price']].mean().reset_index()

item_type_data = item_type_data.sort_values(by='Unit Price')

plt.figure(figsize=(12, 6))
bar_width = 0.4
index = range(len(item_type_data))
plt.bar(index, item_type_data['Unit Cost'], bar_width, label='Unit Cost', color='b')
plt.bar([i + bar_width for i in index], item_type_data['Unit Price'], bar_width, label='Unit Price', color='g')
plt.xlabel('Item Type')
plt.ylabel('Amount')
plt.title('Comparison of Unit Cost and Unit Price by Item Type')
plt.xticks([i + bar_width / 2 for i in index], item_type_data['Item Type'], rotation=90)
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""## Analyzing the Speed of Delivery"""

amazon_data['Ship Date'] = pd.to_datetime(amazon_data['Ship Date'])

amazon_data['Shipping Time'] = (amazon_data['Ship Date'] - amazon_data['Order Date']).dt.days

amazon_data['Order Day of Year'] = amazon_data['Order Date'].dt.dayofyear
amazon_data['Ship Day of Year'] = amazon_data['Ship Date'].dt.dayofyear

regression_model = LinearRegression()
X = amazon_data['Order Day of Year'].values.reshape(-1, 1)
y = amazon_data['Ship Day of Year'].values
regression_model.fit(X, y)

predicted_ship_dates = regression_model.predict(X)

plt.figure(figsize=(12, 6))
plt.scatter(amazon_data['Order Day of Year'], amazon_data['Ship Day of Year'], label='Actual Shipping Date', s=5)
plt.plot(amazon_data['Order Day of Year'], predicted_ship_dates, color='red', label='Predicted Shipping Date', linewidth=2)
plt.title('Linear Regression: Order Date vs. Shipping Date')
plt.xlabel('Order Day of Year')
plt.ylabel('Shipping Day of Year')
plt.legend()
plt.grid()
plt.show()

slope = regression_model.coef_[0]
intercept = regression_model.intercept_
print(f'Linear Regression Equation: Shipping Day = {slope:.4f} * Order Day + {intercept:.4f}')

average_shipping_time = amazon_data['Shipping Time'].mean()

print(f"The average shipping time is {average_shipping_time:.2f} days.")